




C Piscine
C 00



Summary:	This document serves as the subject for the C 00 module of the C Piscine at 42.
Version: 8


Contents
I Instructions	2
II AI Instructions	4
III Foreword	6
IV Exercise 00: ft_putchar	7
V Exercise 01: ft_print_alphabet	8
VI Exercise 02: ft_print_reverse_alphabet	9
VII Exercise 03: ft_print_numbers	10
VIII Exercise 04: ft_is_negative	11
IX Exercise 05: ft_print_comb	13
X Exercise 06: ft_print_comb2	14
XI Exercise 07: ft_putnbr	15
XII Exercise 08: ft_print_combn	16
XIII Submission and peer-evaluation	17












1



Chapter I Instructions
• Only this page serves as your reference, do not trust rumors.
• Watch out! This document may change before submission.
• Ensure you have the appropriate permissions on your files and directories.
• You must follow the submission procedures for all your exercises.
• Your exercises will be checked and graded by your fellow classmates.
• Additionally, your exercises will be evaluated by a program called Moulinette.
• Moulinette is meticulous and strict in its assessment. It is fully automated, and there is no way to negotiate with it. To avoid unpleasant surprises, be as thorough as possible.
• Moulinette is not open-minded. If your code does not adhere to the Norm, it won't attempt to understand it. Moulinette relies on a program called norminette to check if your files comply with the Norm. TL;DR: Submitting work that doesn't pass norminette's check makes no sense.
• These exercises are arranged in order of difficulty, from easiest to hardest. We will not consider a successfully completed harder exercise if an easier one is not fully functional.
• Using a forbidden function is considered cheating. Cheaters receive a grade of -42, which is non-negotiable.
• You only need to submit a main() function if we specifically ask for a program.
• Moulinette compiles with the following flags: -Wall -Wextra -Werror, using
cc.
• If your program does not compile, you will receive a grade of 0.
• You cannot leave any additional file in your directory beyond those specified in the assignment.
• Have a question? Ask the peer on your right. If not, try the peer on your left.

2

C Piscine	C 00

• Your reference guide is called Google / man / the Internet / ...
• Check the "C Piscine" section of the forum on the intranet or the Piscine on Slack.
• Carefully examine the examples. They may contain crucial details that are not explicitly stated in the assignment...
• By Odin, by Thor! Use your brain!!!



































3



Chapter II
AI Instructions

? Context
The C Piscine is intense. It's your first big challenge at 42 - a deep dive into problem- solving, autonomy, and community.
During this phase, your main objective is to build your foundation - through struggle, repetition, and especially peer-learning exchange.
In the AI era, shortcuts are easy to find. However, it's important to consider whether your AI usage is truly helping you grow - or simply getting in the way of developing real skills.
The Piscine is also a human experience - and for now, nothing can replace that. Not even AI.
For a more complete overview of our stance on AI - as a learning tool, as part of the ICT curriculum, and as a growing expectation in the job market - please refer to the dedicated FAQ available on the intranet.

? Main message
? Build strong foundations without shortcuts.
? Really develop tech & power skills.
? Experience real peer-learning, start learning how to learn and solve new problems.
? The learning journey is more important than the result.
? Learn about the risks associated with AI, and develop effective control practices and countermeasures to avoid common pitfalls.




4

C Piscine	C 00

? Learner rules:
• You should apply reasoning to your assigned tasks, especially before turning to AI.
• You should not ask for direct answers to the AI.
• You should learn about 42 global approach on AI.

? Phase outcomes:
Within this foundational phase, you will get the following outcomes:
• Get proper tech and coding foundations.
• Know why and how AI can be dangerous during this phase.

? Comments and example:
• Yes, we know AI exists - and yes, it can solve your projects. But you're here to learn, not to prove that AI has learned. Don't waste your time (or ours) just to demonstrate that AI can solve the given problem.
• Learning at 42 isn't about knowing the answer - it's about developing the ability to find one. AI gives you the answer directly, but that prevents you from building your own reasoning. And reasoning takes time, effort, and involves failure. The path to success is not supposed to be easy.
• Keep in mind that during exams, AI is not available - no internet, no smartphones, etc. You'll quickly realise if you've relied too heavily on AI in your learning process.
• Peer learning exposes you to different ideas and approaches, improving your inter- personal skills and your ability to think divergently. That's far more valuable than just chatting with a bot. So don't be shy - talk, ask questions, and learn together!
• Yes, AI will be part of the curriculum - both as a learning tool and as a topic in itself. You'll even have the chance to build your own AI software. In order to learn more about our crescendo approach you'll go through in the documentation available on the intranet.
? Good practice:


? Bad practice:


5



Chapter III Foreword
Cod liver oil is a nutritional supplement derived from the liver of codfish (Gadidae
Like most fish oils, it contains high levels of omega-3 fatty acids, including eicosapentaenoic acid (EPA) and docosahexaenoic acid (DHA). Cod liver oil is also rich in vitamins A and D.
Historically, it has been consumed for its vitamin A and vitamin D content.
It was once commonly given to children, as vitamin D has been shown to prevent rickets and other symptoms of vitamin D deficiency.




In contrast to cod liver oil, C is good, make sure to eat some!












6



Chapter IV
Exercise 00: ft_putchar






Turn-in directory: ex00/
Files to turn in: ft_putchar.c
Allowed functions: write

Exercise 00 ft_putchar




• Write a function that displays the character passed as a parameter.
• The function should be prototyped as follows:


• To display the character, you must use the write function as follows:













7



Chapter V
Exercise 01: ft_print_alphabet






Turn-in directory: ex01/
 
Exercise 01 ft_print_alphabet

Files to turn in: ft_print_alphabet.c
Allowed functions: write



• Create a function that displays the alphabet in lowercase, on a single line, in as- cending order, starting from the letter 'a'.
• The function should be prototyped as follows:


















8



Chapter VI
Exercise 02: ft_print_reverse_alphabet




Exercise 02ft_print_reverse_alphabetTurn-in directory: ex02/Files to turn in: ft_print_reverse_alphabet.cAllowed functions: write


• Create a function that displays the alphabet in lowercase, on a single line, in de- scending order, starting from the letter 'z'.
• The function should be prototyped as follows:















9



Chapter VII
Exercise 03: ft_print_numbers






Turn-in directory: ex03/
 
Exercise 03 ft_print_numbers

Files to turn in: ft_print_numbers.c
Allowed functions: write



• Create a function that displays all digits on a single line, in ascending order.
• The function should be prototyped as follows:



















10



Chapter VIII
Exercise 04: ft_is_negative






Turn-in directory: ex04/
Files to turn in: ft_is_negative.c
Allowed functions: write

Exercise 04 ft_is_negative




• Create a function that displays 'N' or 'P' depending on the sign of the integer passed as a parameter.
? If n is negative, display 'N'.
? If n is positive or zero, display 'P'.
• The function should be prototyped as follows:














11

C Piscine	C 00

Milestone Achieved, Keep Going!
You have reached the end of the mandatory exercises required to validate this project.
Now, it's up to you to decide whether to continue with the following optional exercises or move on to your next project. Both paths will expose you to valuable concepts sooner or later.
To make your decision, consider the following points:
• The very first exam focuses on C programming. If you've already worked on the first C project, this experience will be useful. The same applies to the "rush" at the end of the week (you'll soon learn more about it).
• Your excellence in this Piscine is evaluated based on multiple factors. Completing each project is important, but your overall progress across all Piscine projects also plays a key role. Choose wisely to optimize your results.
• You can always revisit and retry the same project in a few days or weeks, up until the end of the Piscine.
• Staying synchronized with your peers fosters better collaboration.


















12



Chapter IX
Exercise 05: ft_print_comb






Turn-in directory: ex05/
Files to turn in: ft_print_comb.c
Allowed functions: write

Exercise 05 ft_print_comb




• Create a function that displays all unique combinations of three distinct digits, with both the digits within each combination and the combinations themselves in ascending order.


• Expected output:


• 987 is not included because 789 already covers that combination.
• 999 is not included because the digit 9 appears more than once.
• The function should be prototyped as follows:





13



Chapter X
Exercise 06: ft_print_comb2






Turn-in directory: ex06/
Files to turn in: ft_print_comb2.c
Allowed functions: write

Exercise 06 ft_print_comb2




• Create a function that displays all different combinations of two distinct two-digits numbers (XX XX) between 00 and 99, listed in ascending order.
• Expected output:


• The function should be prototyped as follows:













14



Chapter XI
Exercise 07: ft_putnbr






Turn-in directory: ex07/ Files to turn in: ft_putnbr.c Allowed functions: write

Exercise 07 ft_putnbr




• Create a function that displays the number passed as a parameter. The function must be able to display all possible values of an int type variable.
• The function should be prototyped as follows:


• Example:
? ft_putnbr(42); should display 42.












15



Chapter XII
Exercise 08: ft_print_combn






Turn-in directory: ex08/
Files to turn in: ft_print_combn.c
Allowed functions: write

Exercise 08 ft_print_combn




• Create a function that displays all unique combinations of n distinct digits in as- cending order, without repetition.
• The value of n will be such that: 0 < n < 10.
• Example output for n = 2:


• The function should be prototyped as follows:











16



Chapter XIII
Submission and peer-evaluation

Submit your assignment in your Git repository as usual. Only the work inside your repository will be evaluated during the defense. Make sure to double-check the names of your files to ensure they are correct.






























17
