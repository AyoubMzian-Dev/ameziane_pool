C Piscine
C 10

Summary: This document is the subject for the module C 10 of the C Piscine @ 42.

Version: 7.0



Contents
I Instructions 2

II AI Instructions 4

III Foreword 6

IV Exercise 00 : display_file 7

V Exercise 01 : cat 8

VI Exercise 02 : tail 9

VII Exercise 03 : hexdump 10

VIII Submission and peer-evaluation 11

1



Chapter I
Instructions

• Only this page serves as your reference, do not trust rumors.
• Watch out! This document may change before submission.
• Ensure you have the appropriate permissions on your files and directories.
• You must follow the submission procedures for all your exercises.
• Your exercises will be checked and graded by your fellow classmates.
• Additionally, your exercises will be evaluated by a program called Moulinette.
• Moulinette is meticulous and strict in its assessment. It is fully automated, and

there is no way to negotiate with it. To avoid unpleasant surprises, be as thorough
as possible.

• Moulinette is not open-minded. If your code does not adhere to the Norm, it won’t
attempt to understand it. Moulinette relies on a program called norminette to
check if your files comply with the Norm. TL;DR: Submitting work that doesn’t
pass norminette’s check makes no sense.

• These exercises are arranged in order of difficulty, from easiest to hardest. We will
not consider a successfully completed harder exercise if an easier one is not fully
functional.

• Using a forbidden function is considered cheating. Cheaters receive a grade of -42,
which is non-negotiable.

• You only need to submit a main() function if we specifically ask for a program.
• Moulinette compiles with the following flags: -Wall -Wextra -Werror, using

cc.
• If your program does not compile, you will receive a grade of 0.
• You cannot leave any additional file in your directory beyond those specified in

the assignment.
• Have a question? Ask the peer on your right. If not, try the peer on your left.

2



C Piscine C 10

• Your reference guide is called Google / man / the Internet / ...
• Check the "C Piscine" section of the forum on the intranet or the Piscine on Slack.
• Carefully examine the examples. They may contain crucial details that are not

explicitly stated in the assignment...
• By Odin, by Thor! Use your brain!!!

3



Chapter II
AI Instructions

● Context
The C Piscine is intense. It’s your first big challenge at 42 — a deep dive into problem-
solving, autonomy, and community.

During this phase, your main objective is to build your foundation — through struggle,
repetition, and especially peer-learning exchange.

In the AI era, shortcuts are easy to find. However, it’s important to consider whether your
AI usage is truly helping you grow — or simply getting in the way of developing real skills.

The Piscine is also a human experience — and for now, nothing can replace that. Not
even AI.

For a more complete overview of our stance on AI — as a learning tool, as part of the
ICT curriculum, and as a growing expectation in the job market — please refer to the
dedicated FAQ available on the intranet.

● Main message
☛ Build strong foundations without shortcuts.
☛ Really develop tech & power skills.
☛ Experience real peer-learning, start learning how to learn and solve new problems.
☛ The learning journey is more important than the result.
☛ Learn about the risks associated with AI, and develop effective control practices

and countermeasures to avoid common pitfalls.

4



C Piscine C 10

● Learner rules:
• You should apply reasoning to your assigned tasks, especially before turning to AI.
• You should not ask for direct answers to the AI.
• You should learn about 42 global approach on AI.

● Phase outcomes:
Within this foundational phase, you will get the following outcomes:

• Get proper tech and coding foundations.
• Know why and how AI can be dangerous during this phase.

● Comments and example:
• Yes, we know AI exists — and yes, it can solve your projects. But you’re here to

learn, not to prove that AI has learned. Don’t waste your time (or ours) just to
demonstrate that AI can solve the given problem.

• Learning at 42 isn’t about knowing the answer — it’s about developing the ability
to find one. AI gives you the answer directly, but that prevents you from building
your own reasoning. And reasoning takes time, effort, and involves failure. The
path to success is not supposed to be easy.

• Keep in mind that during exams, AI is not available — no internet, no smartphones,
etc. You’ll quickly realise if you’ve relied too heavily on AI in your learning process.

• Peer learning exposes you to different ideas and approaches, improving your inter-
personal skills and your ability to think divergently. That’s far more valuable than
just chatting with a bot. So don’t be shy — talk, ask questions, and learn together!

• Yes, AI will be part of the curriculum — both as a learning tool and as a topic
in itself. You’ll even have the chance to build your own AI software. In order to
learn more about our crescendo approach you’ll go through in the documentation
available on the intranet.

✓ Good practice:
I’m stuck on a new concept. I ask someone nearby how they approached it. We talk
for 10 minutes — and suddenly it clicks. I get it.

✗ Bad practice:
I secretly use AI, copy some code that looks right. During peer evaluation, I can’t
explain anything. I fail. During the exam — no AI — I’m stuck again. I fail.

5



Chapter III
Foreword

Body Count is an American heavy metal band formed in Los Angeles,
California, in 1990. The group is fronted by Ice-T, who co-founded the group
with lead guitarist Ernie C out of their interest in heavy metal music.
Ice-T took on the role of vocalist and writing the lyrics for most of
the group’s songs. Lead guitarist Ernie C has been responsible for writing
the group’s music. Their controversial self-titled debut album was released
on Sire Records in 1992.

The song "Cop Killer" was the subject of much controversy. Although Sire
Records’ parent company, Warner Bros. Records, defended the single,
Ice-T chose to remove the track from the album because he felt
that the controversy had eclipsed the music itself. The group left
Sire the following year. Since then, they have released three further
albums on different labels, none of which have been received as commercially
or critically well as their debut album.

Three out of the band’s original six members are deceased:
D-Roc died from lymphoma, Beatmaster V from leukemia and
Mooseman in a drive-by shooting.

Click here, start it, and work... Right now!

6



Chapter IV
Exercise 00 : display_file

Exercise 00

display_file
Turn-in directory: ex00/
Files to turn in: Makefile, and files needed for your program
Allowed functions: close, open, read, write

• Create a program called ft_display_file that displays, on the standard output,
only the content of the file given as an argument.

• The submission directory should contain a Makefile with the following rules: all,
clean, fclean. The binary must be named ft_display_file.

• The use of the malloc function is forbidden. You must complete this exercise by
declaring a fixed-size array.

• All files given as arguments will be valid.
• Error messages must be displayed on their designated output, followed by a new

line.
• If no argument is given, it should display:

File name missing.

• If more than one argument is given, it should display:
Too many arguments.

• If the file cannot be read, it should display:
Cannot read file.

7



Chapter V
Exercise 01 : cat

Exercise 01

cat
Turn-in directory: ex01/
Files to turn in: Makefile, and files needed for your program
Allowed functions: close, open, read, write, strerror, basename

• Create a program called ft_cat, which performs the same function as the system’s
cat command-line tool.

• You don’t need to handle options.
• The submission directory should contain a Makefile with the following rules: all,

clean, fclean.
• You may use the variable errno (refer to the man page for errno).
• You should read the manual pages of all the authorized functions.
• You must complete this exercise by declaring a fixed-size array. This array should

have a size limited to slightly less than 30 ko. To test this size limit, use the ulimit
command in your shell.

8



Chapter VI
Exercise 02 : tail

Exercise 02

tail
Turn-in directory: ex02/
Files to turn in: Makefile, and files needed for your program
Allowed functions: close, open, read, write, malloc, free, strerror, basename

• Create a program called ft_tail, which performs the same function as the system
command tail.

• The only option you need to handle is -c, but you don’t need to handle the ’+’ or
’-’ signs.

• All tests will be conducted using the -c option.
• The submission directory should contain a Makefile with the following rules: all,

clean, fclean.
• You may use the variable errno.

9



Chapter VII
Exercise 03 : hexdump

Exercise 03

hexdump
Turn-in directory: ex03/
Files to turn in: Makefile, and files needed for your program
Allowed functions: close, open, read, write, malloc, free, strerror, basename

• Create a program called ft_hexdump, which performs the same function as the
system’s hexdump command-line tool, without redirection.

• The only option you need to handle is -C.
• The submission directory should contain a Makefile with the following rules: all,

clean, fclean.
• You may use the variable errno.

10



Chapter VIII
Submission and peer-evaluation

Submit your assignment to your Git repository as usual. Only the work inside your
repository will be evaluated during the defense. Make sure to double-check the filenames
to ensure they are correct.

You must submit only the files required by the project instructions.

11